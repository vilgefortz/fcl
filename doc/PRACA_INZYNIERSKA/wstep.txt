Pomys³ na logikê rozmyt± zrodzi³ siê w 1960 r na Uniwersytecie Kalifornijskim w Berkley. Zosta³a ona zaproponowana przez Dr Lotfi Zadecha, który pracowa³ nad problemem rozumienia natura	lnego jêzyka przez komputer. Naturalny jêzyk, podobnie jak praktycznie wszystko w otaczaj±cym nas ¶wiecie ciê¿ko jest przet³umaczyæ na komputerowe 0/1. Samo pytanie czy wszystko da siê wyt³umaczyæ binarnie jest czysto filozoficzne, choæ zazwyczaj dane które mamy do przetworzenia dostajemy ju¿ w tej postaci z innego, elektronicznego ¼ród³a. 

Logika rozmyta do pojêæ prawdy i fa³szu dodaje równie¿ ca³± gamê warto¶ci po¶rednich. Takie podej¶cie znane by³o ju¿ wcze¶niej w logice trójwaro¶ciowiej £ukasiewicza (L3) (TODO wikipedia https://pl.wikipedia.org/wiki/Logika_tr%C3%B3jwarto%C5%9Bciowa), podobne próby podejmowa³ równie¿ Clarence Lewis. Trzecim stanem w logice £ukasiewicza by³ stan nieznany (0.5). Lotfi ten pomys³ rozwin±³ na ca³± przestrzeñ warto¶ci <0,1>. 

W logice rozmytej warto¶ci 0 i 1 stanowi± ekstremalne przypadki prawdy (albo stanu wa¿no¶ci, faktu), mo¿e ona jednak przybieraæ dowolne warto¶ci ze zbioru <0,1> co daje mo¿liwo¶æ stwierdzenia, ¿e co¶ jest jednocze¶nie np. w 0.7 wysokie i w 0.3 ciep³e. Jest to bardzo bliskie naszemu naturalnemu procesowi my¶lowemu, gdzie nic nigdy nie jest do koñca czarne ani bia³e. Logika rozmyta nie wyklucza swoim istnieniem logiki binarnej, jest jedynie jej uogólnieniem. Prawa, które ni± rz±dz± daj± siê zaaplikowaæ do logiki Boole'a dlatego, ¿e w zadbano o zachowanie praw Augusta De Morgana (TODO https://en.wikipedia.org/wiki/De_Morgan%27s_laws).

Logika rozmyta rozpoczyna siê od wykreowania regu³ spisanych w naturalnym jêzyku. System rozmyty konwertuje te regu³y do ich matematycznego odpowiednika na podstawie odpowiedniego modelu rozmytego. Upraszcza to w du¿ej mierze pracê projektanta takiego systemu, poniewa¿ reprezentacja rozwi±zania problemu jest bardzo czytelna dla cz³owieka. Równie¿ rezultaty prac takiego systemu s± celniejsze ni¿ te z systemów opartych na logice dwuwarto¶ciowej, poniewa¿ system pracuje w rzeczywistym ¶wiecie, gdzie rozmycie warto¶ci wej¶ciowych i wyj¶ciowych jest czym¶ naturalnym. Kolejnym plusem logiki rozmytej jest jej prostota i elastyczno¶æ. Mo¿e ona rozwi±zywaæ problemy na podstawie niekompletnych, niedok³adnych danych. Mo¿e te¿ modelowaæ nieliniowe funkcje o du¿ej z³o¿ono¶ci. Przydaje siê to szczególnie w przypadkach, gdy mamy do czynienia ze ¶rodowiskiem, które mo¿e siê zmieniaæ, poniewa¿ przeprojektowanie modelu funkcji rozmytych nie wymaga wiedzy na temat z³o¿ono¶ci algorytmicznej problemu, 
tylko wiedzy eksperckiej - regu³y wyra¿amy w czytelnym naturalnym jêzyku. 

W praktyce mo¿na niewielkim nak³adem prac napisaæ system, który bêdzie obs³ugiwa³ ka¿dy przypadek danych wej¶ciowych. Teoria zbiorów rozmytych cieszy siê do¶æ du¿± popularno¶ci± w dziedzinach zwi±zanych ze sterowaniem oraz przetwarzaniem jêzyka. Produkowane s± mikroprocesory których rozkazy projektowane s± pod przetwarzanie rozmyte. Powsta³o do tego czasu kilka sposobów reprezentacji wiedzy systemu rozmytego. W niniejszej pracy skupi³em siê nad przedstawieniem jednego z nich. 

Fuzzy Control Language (FCL) jest jêzykiem który zosta³ ustandaryzowany przez Miêdzynarodow± Komisjê Elektrotechniczn± (IEC) w dokumencie IEC 61131-7. Jêzyk ten nie zawiera ¿adnych funkcjonalno¶ci nie zwi±zanych z logik± rozmyt±, co sprawia, ¿e nie da siê w nim napisaæ najprostszego programu który da jakiekolwiek rezultaty (np "Hello World"). Mo¿e on byæ jednak czê¶ci± wiêkszego programu. Biblioteka napisana przeze mnie w jêzyku Java ma na celu interpretacjê pliku skryptowego FCL i jego reprezentacjê w postaci struktury powi±zanych obiektów. Do biblioteki do³±czy³em aplikacjê webow±, która jest ¶rodowiskiem IDE do jêzyka FCL. Mozna j± wykorzystaæ do sterowania inn± aplikacj±, która np. modeluje problem. Aplikacja pozwala na ukazanie wewnêtrznych mechanizmów zaprojektowanego systemu rozmytego

